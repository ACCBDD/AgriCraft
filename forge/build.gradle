plugins {
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
	id 'org.spongepowered.mixin'
}
base {
	archivesName = "${mod_name}-forge-${minecraft_version}"
}
//mixin {
//	add(sourceSets.main, "${mod_id}.refmap.json")
//
//	config("${mod_id}.mixins.json")
//	config("${mod_id}.forge.mixins.json")
//}
minecraft {
	mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

	copyIdeResources = true //Calls processResources when in dev

	// Automatically enable forge AccessTransformers if the file exists
	// This location is hardcoded in Forge and can not be changed.
	// https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
	if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
		accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	}

	runs {
		client {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			taskName 'Client'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modClientRun {
					source sourceSets.main
					source project(":common").sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			taskName 'Server'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modServerRun {
					source sourceSets.main
					source project(":common").sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			taskName 'Data'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modDataRun {
					source sourceSets.main
					source project(":common").sourceSets.main
				}
			}
		}
	}
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	compileOnly project(":common")
	annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")

	implementation fg.deobf("com.teamresourceful.resourcefulconfig:resourcefulconfig-$name-1.20:$resourcefulconfig_version")

	compileOnly fg.deobf("mezz.jei:jei-$minecraft_version-common-api:$jei_version")
	compileOnly fg.deobf("mezz.jei:jei-$minecraft_version-forge-api:$jei_version")
	runtimeOnly fg.deobf("mezz.jei:jei-$minecraft_version-forge:$jei_version")

//	compileOnly fg.deobf("curse.maven:jei-238222:4690097")  // JEI 15.2.0.25
//	modLocalRuntime "curse.maven:jei-238222:4690097"  // JEI 15.2.0.25

//	compileOnly fg.deobf("curse.maven:jade-324717:4681836")  // Jade-1.20.1-forge-11.4.3-api
	implementation fg.deobf("curse.maven:jade-324717:4681833-api-4681836")  // Jade-1.20.1-forge-11.4.3
//	compileOnly fg.deobf("curse.maven:serene-seasons-291874:4761605")  // Serene Seasons 1.20.1-9.0.0.46-api
	implementation fg.deobf("curse.maven:serene-seasons-291874:4761603-api-4761605")  // Serene Seasons 1.20.1-9.0.0.46
}

tasks.withType(JavaCompile).configureEach {
	source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
	source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
	from(project(":common").sourceSets.main.allSource)
}

processResources {
	from project(":common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')


//loom {
//	accessWidenerPath = project(":common").loom.accessWidenerPath
//	forge {
//		convertAccessWideners = true
//		extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
////		mixinConfig "$project.mod_id-common.mixins.json"
////		mixinConfig "${project.mod_id}.mixins.json"
//		dataGen {
//			mod project.mod_id
//		}
//	}

//}



